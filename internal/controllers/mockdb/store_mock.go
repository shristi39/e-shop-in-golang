// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/store.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	models "commerce/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStore) Create(name string, Price int, image, description, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, Price, image, description, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStoreMockRecorder) Create(name, Price, image, description, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), name, Price, image, description, email)
}

// Delete mocks base method.
func (m *MockStore) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), id)
}

// FindAllProduct mocks base method.
func (m *MockStore) FindAllProduct() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProduct")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProduct indicates an expected call of FindAllProduct.
func (mr *MockStoreMockRecorder) FindAllProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProduct", reflect.TypeOf((*MockStore)(nil).FindAllProduct))
}

// FindProductById mocks base method.
func (m *MockStore) FindProductById(id int) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductById", id)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductById indicates an expected call of FindProductById.
func (mr *MockStoreMockRecorder) FindProductById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductById", reflect.TypeOf((*MockStore)(nil).FindProductById), id)
}

// FindProductByStatus mocks base method.
func (m *MockStore) FindProductByStatus(status bool) (*[]models.Product, *int, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductByStatus", status)
	ret0, _ := ret[0].(*[]models.Product)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(*int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// FindProductByStatus indicates an expected call of FindProductByStatus.
func (mr *MockStoreMockRecorder) FindProductByStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductByStatus", reflect.TypeOf((*MockStore)(nil).FindProductByStatus), status)
}

// Login mocks base method.
func (m *MockStore) Login(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockStoreMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStore)(nil).Login), email, password)
}

// Register mocks base method.
func (m *MockStore) Register(name, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", name, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockStoreMockRecorder) Register(name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockStore)(nil).Register), name, email, password)
}

// Update mocks base method.
func (m *MockStore) Update(status bool, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", status, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStoreMockRecorder) Update(status, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStore)(nil).Update), status, id)
}
